<%@ page import="ru.job4j.for_delete.User" %>
<%@ page import="ru.job4j.for_delete.UserStorage" %>
<%@ page import="java.util.List" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<html>
<head>
    <!-- Здесь мы выводим текст заголовка -->
    <title>Here is a title</title>
</head>
<body>
<!-- Здесь мы открываем тег form, который отвечает за ввод данных-->
<!-- Параметр action - указание на сервлет, который будет обрабатывать результат работы-->
<!-- В данном случае мы используем jstl и с его помощью обращаемся в корень проекта -->
<!-- Параметр method - указание на тот метод, который мы вызываем в сервлете, который будет вызываться-->
<form action="${pageContext.servletContext.contextPath}/fordel" method="post">
    <!-- Стандартный текстовый тег-->
    <p>Login: </p>
    <!-- Параметр type - тип вводимых данных в появившемся окне (в данном случае, текст) -->
    <!-- Параметр name - имя (псевдоним), которое мы присвоим введённым данным -->
    <input type="text" name="login">
    <!-- Перевод строки -->
    <br/>
    <p>Mail: </p><input type="text" name="mail">
    <br/>
    <!-- Параметр type - тип вводимых данных в появившемся окне (в данном случае, кнопка ввода)-->
    <input type="submit">
</form>
<!-- Перевод строки -->
<br/>
<!-- Тег, отвечающий за вывод таблицы-->
<!-- style - атрибут, отвечающий за стиль таблицы-->
<!-- border - атрибут, отвечающий за границу; в данном случае она толщиной в 1 пиксель, сплошная и чёрная-->
<!-- cellpadding - атрибут, добавляющий пространство между текстом и границами рамки таблицы, улучшает читабельность -->
<!-- cellspacing - атрибут, добавляющий внешнее пространство ячейки -->
<!-- border - атрибут, отвечающий за толщину рамки -->
<table style="border: 1px solid black" cellpadding="1" cellspacing="1" border="1">
    <!-- Тег внутри таблицы, отвечающий за строку -->
    <tr>
        <!-- Тег внутри таблицы, отвечающий за ячейку-header -->
        <th>User login</th>
        <th>User mail</th>
    </tr>
    <!-- С помощью атрибута "c" мы обращаемся к jstl и его особым видам кода-->
    <!-- Здесь используется тег c:foreach, который заменяет неудобный цикл for. -->
    <!-- Атрибут items является обращением к ничему иному, как атрибуту Request, который мы отправили в запрос ранее. Если нам надо обратиться к Request (то есть вытащить атрибуты, которые мы заложили туда заранее), то обращение происходит по схеме ${имя_параметра} -->
    <!-- Атрибут var  - это последовательное обращение к каждой позиции атрибута items, которому на данный момент присвоено значение users из Request. В данном контексте user - это переменная, к которой мы будем обращаться, проходя по циклу..-->
    <c:forEach items="${users}" var="user">
        <tr>
            <!-- Тег choose работает наподобие if или switch в Java. -->
            <!-- Тег when существует для того, чтобы излагать в нём условия-->
            <!-- Атрибут test проверяет условие наподобие boolean. Если числовые данные проверяются при помощи стандартных <>=, то объекты проверяются при помощи данных "eq" (равно) и "ne" (не равно)-->
            <!-- Необходимо закрывать все тег choose сразу же после выполнения условия when-->
            <c:choose>
                <c:when test="${user.login eq user.mail}">
                    <!-- c:out - тег для вывода информации, если условие строчкой выше будет соблюдено -->
                    <!-- атрибут value вынимает информацию из user (который, в свою очередь, пооочерёлно вызывает все значения users, взятые из Request). Обращаем внимание, что здесь мы используем технологии Java Beans, вынимая данные просто по имени из класса (это обращение автоматически преобразуется в getter). Таким образом в каждую из двух ячеек в строке мы присваиваем значения login и mail, а затем переходим к следующему в списке User -->
                    <td><c:out value="${user.login}"></c:out></td>
                    <!-- также в атрибут value можно просто присвоить некое значение-->
                    <td><c:out value="Equals to login."></c:out></td>
                </c:when>
            </c:choose>
            <c:choose>
                <c:when test="${user.login ne user.mail}">
                    <!-- c:out - тег для вывода информации, если условие строчкой выше будет соблюдено -->
                    <!-- атрибут value вынимает информацию из user (который, в свою очередь, пооочерёлно вызывает все значения users, взятые из Request). Обращаем внимание, что здесь мы используем технологии Java Beans, вынимая данные просто по имени из класса (это обращение автоматически преобразуется в getter). Таким образом в каждую из двух ячеек в строке мы присваиваем значения login и mail, а затем переходим к следующему в списке User -->
                    <td><c:out value="${user.login}"></c:out></td>
                    <td><c:out value="${user.mail}"></c:out></td>
                </c:when>
            </c:choose>
        </tr>
    </c:forEach>
    <!-- Стандартная и уже привычная форма-->
    <form action="${pageContext.servletContext.contextPath}/signout" method="put">
        <!-- Вывод кнопки с текстом "Exit?", нажав на которую, мы переходим на сервлет c URL /signout -->
        <input type="submit" value="Exit?">
    </form>
</table>
</body>
</html>
